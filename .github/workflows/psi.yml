name: ðŸš€ Coleta PSI

on:
  schedule:
    - cron: '0 3 * * *'    # todo dia Ã s 03:00 UTC
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PSI_KEY: ${{ secrets.PSI_KEY }}
      DUCKDB_FILE_PATH: data/psi_results.duckdb # Define DuckDB file path for workflow
      IA_ITEM_IDENTIFIER: "psi_brazilian_city_audits" # Example - user should configure this
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x' # Use a recent Python 3 version

      - name: Install Python dependencies (Internet Archive client)
        run: pip install internetarchive

      - name: Coletar dados PSI
        timeout-minutes: 10
        continue-on-error: true
        env:
          PSI_CONCURRENCY: 10
          PSI_MAX_RETRIES: 2
          PSI_RETRY_DELAY_MS: 1000
          PSI_REQUESTS_PER_MIN: 60
        run: node collect-psi.js

      - name: Upload DuckDB database to Internet Archive
        if: success() # Only run if PSI collection was successful (or at least didn't hard fail script)
        env:
          IA_ACCESS_KEY: ${{ secrets.IA_ACCESS_KEY }}
          IA_SECRET_KEY: ${{ secrets.IA_SECRET_KEY }}
          # DUCKDB_FILE_PATH and IA_ITEM_IDENTIFIER are already in job env
        run: python upload_to_ia.py

      - name: Handle PSI Collection Errors
        if: always() # This step should always run to check for errors
        run: |
          if [ -f psi_errors.log ] && [ -s psi_errors.log ]; then
            echo "PSI collection errors found. Preparing TODO.md."
            echo "HAS_PSI_ERRORS=true" >> $GITHUB_ENV
          else
            echo "No PSI collection errors found."
            echo "HAS_PSI_ERRORS=false" >> $GITHUB_ENV
          fi

      - name: Archive PSI Error Log
        if: env.HAS_PSI_ERRORS == 'true'
        run: |
          mkdir -p data/psi_error_reports
          cp psi_errors.log data/psi_error_reports/psi_errors_${{ github.run_id }}.log
          echo "PSI error log archived to data/psi_error_reports/psi_errors_${{ github.run_id }}.log"

      - name: Create/Update TODO.md if errors exist
        if: env.HAS_PSI_ERRORS == 'true'
        run: |
          echo "## PSI Collection Error Reports (P0)" > TODO.md
          echo "" >> TODO.md
          echo "Errors may have been detected during scheduled PSI data collections." >> TODO.md
          echo "Please check the \`data/psi_error_reports/\` directory for log files named \`psi_errors_<run_id>.log\`." >> TODO.md
          echo "Review these logs and address any reported issues." >> TODO.md
          echo "" >> TODO.md
          echo "Workflow run that last updated this TODO: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> TODO.md

      - name: Commit and Push Error Reports and TODO.md to Main Branch
        if: env.HAS_PSI_ERRORS == 'true'
        run: |
          ORIGINAL_BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          echo "Committing error reports to branch: $ORIGINAL_BRANCH"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Ensure we are on the correct branch and it's up-to-date
          git checkout $ORIGINAL_BRANCH
          git pull origin $ORIGINAL_BRANCH

          # Added data/psi_processing_state.json from fix/psi-commit-error
          git add TODO.md data/psi_error_reports/ data/psi_processing_state.json

          if ! git diff --staged --quiet; then
            # Updated commit message from fix/psi-commit-error
            git commit -m "docs: Log PSI collection errors, update TODO, and save state

            Errors were detected during the scheduled PSI data collection.
            Details have been archived to data/psi_error_reports/
            TODO.md has been updated, and the latest processing state
            has been saved to data/psi_processing_state.json.

            Workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            git push origin $ORIGINAL_BRANCH
          else
            # Updated message from fix/psi-commit-error
            echo "No changes to TODO.md, error reports, or processing state to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit and Push Data State and/or Error Reports
        if: always() # This step should always run to commit relevant files
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          ORIGINAL_BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          echo "Attempting to commit to branch: $ORIGINAL_BRANCH"
          git checkout $ORIGINAL_BRANCH
          # git pull origin $ORIGINAL_BRANCH # Pulling might cause issues if remote changed TODO.md, careful here. For now, assume local is authoritative for this run.

          # Always try to add the processing state file
          git add data/psi_processing_state.json

          COMMIT_MESSAGE_SUBJECT=""
          COMMIT_MESSAGE_BODY=""

          if [ "${{ env.HAS_PSI_ERRORS }}" == "true" ]; then
            echo "Adding error reports and TODO.md to commit."
            git add TODO.md data/psi_error_reports/
            COMMIT_MESSAGE_SUBJECT="docs: Log PSI errors, update TODO, and save state"
            COMMIT_MESSAGE_BODY="Errors detected during PSI collection. Logs in data/psi_error_reports/, TODO updated. Processing state saved."
          else
            echo "No PSI errors. Committing processing state if changed."
            COMMIT_MESSAGE_SUBJECT="chore: Update PSI processing state"
            COMMIT_MESSAGE_BODY="Update PSI processing state after successful run."
          fi

          COMMIT_MESSAGE_BODY="${COMMIT_MESSAGE_BODY}\n\nWorkflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if ! git diff --staged --quiet; then
            echo "Changes detected, proceeding with commit."
            git commit -m "${COMMIT_MESSAGE_SUBJECT}" -m "${COMMIT_MESSAGE_BODY}"
            # Retry push operation to handle potential transient network issues or slight delays in branch protection rules
            for i in 1 2 3; do
              git push origin $ORIGINAL_BRANCH && break
              echo "Push attempt $i failed. Retrying in 5 seconds..."
              sleep 5
            done || echo "Failed to push changes after multiple retries."
          else
            echo "No changes to commit (processing state, TODO.md, or error reports)."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup temporary error log
        if: always()
        run: rm -f psi_errors.log
